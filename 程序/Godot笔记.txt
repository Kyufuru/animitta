1. 简介
- Godot 是面向对象的, 节点之间存在继承关系
- 节点分为四类: 2D(蓝色), 3D(红色), Control(绿色), 其他(白色)
- 节点可以包含另一节点, 从而组织成节点树, 构成一个场景
- 场景以 .tscn 文件的方式保存在游戏目录中
- 通过实例化的方式, 可以在场景内引用另一场景
- 在场景面板中, 节点和场景有绘制顺序(与图层类似)

2. GdScript
- 脚本语言使用 GdScript
- GdScript 与 Python 语言基本相同
    数据类型: int, float, bool, String, Dicts, Array
    动态类型: var, const
    静态初始化: var str: String = 'hello'
    函数: func f(x1: int, x2: String) -> bool:
        return true
    控制流: if-else, while, for, continue/break
    类: class

3. 脚本与节点
- 所有的脚本都必须依附于节点运行
- 所有节点都是类的实例, 有默认和内置的属性/方法
- 内置属性/方法以 '_' 开头
- 常用方法:
    _ready(): 当节点挂载到节点树时调用
    _process(delta): 游戏内的每一帧都会调用, delta 为上一帧到当前帧的时长

4. 帧与帧时长
- 帧率不同, 每秒调用 _process(delta) 的次数也不同
- 按帧更新的值需要与 delta 相乘, 以抵消不同帧率的影响
  确保在不同电脑上, 图像的表现是一致的

5. 输入
- 用户的按键输入可以由项目的输入映射设置
- 通过 Input 对象访问输入映射, 从而处理用户的按键输入
- Input.get_vector(px, nx, py, ny, dead) -> (x, y) 用于判断玩家方向

6. 节点引用
- 通过 get_node("path/node") 或 $"path/node": 引用其他节点
- 为节点设置唯一名称访问, 可以使用 %node 简化节点路径
- 通过 $".." 访问父节点

7. 物理
- StaticBody2D, CharacterBody2D, RigidBody2D 和 Area2D
  都是用来表现对象物理和碰撞判定的节点, 这些节点根据速度和方向来移动物体
- velocity 来更新速度, 使用 move_and_slide() 来更新位置
- velocity 会自动使用 delta 来计算速度
- Area2D: 2D 区域节点, 用以检测物体的进入或离开, 可移动(车)
- StaticBody2D: 2D 静态物体节点, 不可移动(墙)
- RigidBody2D: 2D 刚体节点, 按物理规律实现物体运动和碰撞(投射物)
- CharacterBody2D: 2D 角色节点, 由代码控制物体运动和碰撞(人)
- 所有的物体节点都需要定义碰撞形状子节点, 并且为碰撞形状节点指定形状
- CollisionShape2D 碰撞形状节点
- CollisionPolygon2D 碰撞多边形节点
- 碰撞形状的中心应维持在原点

8. 信号(signal)
- 信号是节点在满足触发条件时, 为通知其他节点触发动作所使用的变量
- 信号可以在属性面板中的节点项选择, 并将其连接到指定节点的脚本上
- 计时器是一类用于在指定时间后触发信号的节点
- 内置信号只能用于单个场景的不同节点, 自定义信号可以在不同场景的节点之间触发
- 通过 signal x(p) 创建自定义信号, 通过 x.emit(p) 手动触发信号

9. 动态创建场景
- 基本流程: 创建场景(作为模板) -> 为场景创建实例 -> 将实例添加到节点树中
- 在创建场景实例前, 需要预加载场景资源:
    var scn: PackedScene = preload(res)
- var ins = scn.instantiate() 为场景创建实例
- add_child(ins) 将实例添加到节点树中
- if "func" in ins 判断实例是否存在对应方法
- ins.queue_free() 销毁实例
- randi() 用于随机生成整数
- Marker2D 节点用于标记实例创建的坐标
- @export var a 将变量导出, 可以在属性面板上修改该变量
- 实例发出的信号可以使用 connect(sign_name,func) 进行动态连接

10. 坐标与相机(Camera2D)
- 坐标分为绝对坐标和相对坐标
- Godot 默认使用相对坐标, 即相对于父节点的 x, y 偏移量
- 使用 global_position 表示绝对坐标
- 使用 Camera2D 创建 2D 镜头, Position Smoothing 控制平滑移动

11. 图块集(Tileset)
- 图块集是一系列游戏图块(Tile)组成的一幅图像
- Godot 使用图块地图(Tilemap)节点表示图块集
- 在检查器中, 可以设置图块集属性, 包括形状, 大小等
- 将图块集拖入下方选项卡, 为节点分配图像资源
- 图像资源可以调整间隔, 设置动画, 绘制碰撞框等
- 通过设置图层属性, 并为图块集分配图层, 可以绘制多个图块集

12. 图块集物理
- 碰撞和图块地图节点一样, 也可以设置图层和遮罩
- 图层给物体分类, 遮罩决定物体可以与哪些物体交互
- 图层名字可以在项目设置中自定义名称
- 使用 TileSet - 绘制为单个图块绘制碰撞框
- TileMap - 图块集 - 保存, 以便在其他场景中复用图块集

13. 粒子(CPU/GPUParticle )
- 粒子是动态生成的小型对象, 通常用于生成特效
- 粒子由 节点生成
- 材质处理决定粒子的运动方式

14. 光照
- 节点:
  DirectionLight2D - 直线光(太阳)
  PositonalLight2D - 点光(手电筒)
  LightOccluder2D - 遮光器
- 通过绘制形状, 并打开阴影属性来使用遮光
- 一个遮光器只能应用一个闭合形状
- 在 TileMap - Rendering 属性下,
  可以为整个图块集设置遮光(需要为图块绘制形状)

15. 动画
- AnimatedSprite2D: 拆分的图像
- Sprite2D - animation: 并列放置的单张图像(spritesheet)
- AnimationPlayer: 控制不同对象属性的帧变化效果
- 在动画播放器中, 为对象创建好轨道后, 在动画属性逐帧添加动画
- 通过新建调用轨道, 可以在动画帧结束后调用函数(销毁节点)

16. 补间动画(Tweens)
- Tweens 是通过脚本创建的一类对象, 用于创建简单动画
- get_tree().create_tween() 创建补间动画
- tween.tween_peroperty() 为补间动画应用
  对象,属性,终止值,时长(s)
- tween_peroperty().from() 设置动画起始值
- tween_peroperty().set_trans() 设置播放方式
- "modulate:a" 单独引用不透明度属性
- tween.set_parallel() 可以同时播放多个补间动画

17. 关卡模板(继承)
- 场景 - 新建继承场景
- 对主场景脚本和节点的修改, 会同时反映到主场景与其他继承的场景
- 主场景与子场景共享脚本, 在新建继承脚本前, 要先解除原脚本的绑定
- 通过 class_name 定义当前脚本的类名, 通过 extends 类继承脚本
- 子场景脚本中的方法会覆盖主场景脚本的同名方法
- 项目设置 - 启动 - 设置启动场景
- 可以使用 get_tree().change_scene_to_file() 切换关卡
- change_scene_to_packed() 切换预加载的关卡

18. 用户界面
- 用户界面由控件(Control)节点组成, 包括: 标签, 图像, 进度条
  按钮, 输入框, 图形, 菜单, 视频等
- 画布层(CanvasLayer)节点负责在画面固定的位置绘制各类控件
- 控件应使用相对位置(对齐和容器), 确保在不同分辨率下能正确绘制
- 通过 Layout - AnchorsPreset 属性改变控件位置
  上下左右表示对应边到容器左/上侧, 与容器宽/高度的比值(范围0-1)
- MarginContainer 节点可以确保控件的边距不会随分辨率改变
- VBox/HBox/GridContainer 节点是对齐多个控件的容器节点
  容器节点只能改变自身属性, 无法改变子节点的位置和大小
- 控件的 Theme 属性可以用于创建样式主题, 改变字体等

19. 用户界面交互
